{"version":3,"sources":["webpack:///./src/pages/git.js"],"names":["steps","Box","posed","div","initialPose","open","staggerChildren","Item","scale","transition","type","stiffness","closed","CommitTree","_ref","motif","split","map","c","i","React","createElement","style","fontSize","key","AsciiLine","enter","opacity","duration","exit","Ascii","_ref2","value","displayed","prevValue","setPrevValue","useState","display","flexDirection","pose","PoseGroup","filter","Boolean","reverse","line","Rebase","step","setStep","setDisplay","useEffect","t","setTimeout","clearTimeout","Layout","onClick","Math","abs","length"],"mappings":"8FAAA,oEAUA,MAAMA,EAAQ,CAAC,0DAAD,gWAuDd,MAAMC,EAAMC,IAAMC,IAAI,CACpBC,YAAa,SAGbC,KAAM,CACJC,gBAAiB,MAIfC,EAAOL,IAAMC,IAAI,CACrBE,KAAM,CACJG,MAAO,EACPC,WAAY,CAAEC,KAAM,SAAUC,UAAW,MAE3CC,OAAQ,CACNJ,MAAO,EACPC,WAAY,CAAEC,KAAM,SAAUC,UAAW,OAI7C,SAASE,EAAUC,GAAa,IAAZ,MAAEC,GAAOD,EAC3B,OAAOC,EAAMC,MAAM,IAAIC,IAAI,CAACC,EAAGC,IAC7BC,IAAAC,cAACd,EAAI,CAACe,MAAO,CAAEC,SAAU,IAAMC,IAAG,IAAML,GAC/B,MAAND,EAAY,IAAWA,IAK9B,MAAMO,EAAYvB,IAAMC,IAAI,CAC1BuB,MAAO,CACLC,QAAS,EACTlB,WAAY,CAAEmB,SAAU,MAE1BC,KAAM,CACJF,QAAS,EACTlB,WAAY,CAAEmB,SAAU,QAItBE,EAAQC,IAA2B,IAA1B,MAAEC,EAAK,UAAEC,GAAWF,EACjC,MAAM,EAACG,EAAU,EAACC,GAAgBC,mBAAS,MAI3C,OAHIF,IAAcF,GAChBG,EAAaH,GAGbZ,IAAAC,cAACpB,EAAG,CACFqB,MAAO,CACLe,QAAS,OACTC,cAAe,kBAEjBC,KAAMN,EAAY,OAAS,UAE3Bb,IAAAC,cAACmB,IAAS,KACPR,EACEhB,MAAM,MACNyB,OAAOC,SACPC,UACA1B,IAAK2B,GACJxB,IAAAC,cAACI,EAAS,CAACD,IAAKoB,EAAMtB,MAAO,CAAEe,QAAS,SACtCjB,IAAAC,cAACR,EAAU,CAACE,MAAO6B,SAQlBC,UAnGf,WACE,MAAM,EAACC,EAAK,EAACC,GAAWX,mBAAS,IAC3B,EAACH,EAAU,EAACe,GAAcZ,oBAAS,GASzC,OAPAa,oBAAU,KACR,MAAMC,EAAIC,WAAW,KACnBH,GAAW,IACV,KACH,MAAO,IAAMI,aAAaF,IACzB,IAGD9B,IAAAC,cAACgC,IAAM,KACLjC,IAAAC,cAAA,UACEiC,QAASA,KACPP,EAAQQ,KAAKC,KAAKV,EAAO,GAAK9C,EAAMyD,WAEvC,QAES,IACVrC,IAAAC,cAAA,UACEiC,QAASA,KACPP,GAASD,EAAO,GAAK9C,EAAMyD,UAE9B,SACQX,EAAK,KAEd1B,IAAAC,cAACS,EAAK,CAACG,UAAWA,EAAWD,MAAOhC,EAAM8C","file":"component---src-pages-git-js-e48771c37d24b5a0b3ac.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport ReactDOM from \"react-dom\"\nimport posed, { PoseGroup } from \"react-pose\"\nimport { reverse, range } from \"lodash/fp\"\nimport Layout from \"../components/layout\"\n\n// specify for each step buildIn et buildOut\n// it might be enough to trick to animation\n// We could then manage to get real transformation for elements\n// that persists between steps\nconst steps = [\n  `\n      E---F---G  topic\n     /\nA---B---C---D  master`,\n  `\n            topic \n            â†“\nA---B---C---D  master          somewhere: E---F---G`,\n  `\n              E' topic \n             /\nA---B---C---D  master          somewhere: F---G`,\n  `\n              E'--F' topic \n             /\nA---B---C---D  master          somewhere: G`,\n  `\n              E'--F'--G' topic\n             /\nA---B---C---D  master`,\n]\n\nfunction Rebase() {\n  const [step, setStep] = useState(0)\n  const [displayed, setDisplay] = useState(false)\n\n  useEffect(() => {\n    const t = setTimeout(() => {\n      setDisplay(true)\n    }, 200)\n    return () => clearTimeout(t)\n  }, [])\n\n  return (\n    <Layout>\n      <button\n        onClick={() => {\n          setStep(Math.abs((step - 1) % steps.length))\n        }}\n      >\n        back\n      </button>{\" \"}\n      <button\n        onClick={() => {\n          setStep((step + 1) % steps.length)\n        }}\n      >\n        next ({step})\n      </button>\n      <Ascii displayed={displayed} value={steps[step]} />\n    </Layout>\n  )\n}\n\nconst Box = posed.div({\n  initialPose: \"closed\",\n  // closed: { staggerChildren: 25 },\n\n  open: {\n    staggerChildren: 15,\n  },\n})\n\nconst Item = posed.div({\n  open: {\n    scale: 1,\n    transition: { type: \"spring\", stiffness: 300 },\n  },\n  closed: {\n    scale: 0,\n    transition: { type: \"spring\", stiffness: 50 },\n  },\n})\n\nfunction CommitTree({ motif }) {\n  return motif.split(\"\").map((c, i) => (\n    <Item style={{ fontSize: 20 }} key={`c${i}`}>\n      {c === \" \" ? \"\\u00A0\" : c}\n    </Item>\n  ))\n}\n\nconst AsciiLine = posed.div({\n  enter: {\n    opacity: 1,\n    transition: { duration: 500 },\n  },\n  exit: {\n    opacity: 0,\n    transition: { duration: 500 },\n  },\n})\n\nconst Ascii = ({ value, displayed }) => {\n  const [prevValue, setPrevValue] = useState(null)\n  if (prevValue !== value) {\n    setPrevValue(value)\n  }\n  return (\n    <Box\n      style={{\n        display: \"flex\",\n        flexDirection: \"column-reverse\",\n      }}\n      pose={displayed ? \"open\" : \"closed\"}\n    >\n      <PoseGroup>\n        {value\n          .split(\"\\n\")\n          .filter(Boolean)\n          .reverse()\n          .map((line) => (\n            <AsciiLine key={line} style={{ display: \"flex\" }}>\n              <CommitTree motif={line} />\n            </AsciiLine>\n          ))}\n      </PoseGroup>\n    </Box>\n  )\n}\n\nexport default Rebase\n"],"sourceRoot":""}