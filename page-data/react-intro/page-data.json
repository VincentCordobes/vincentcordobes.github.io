{"componentChunkName":"component---src-templates-blog-post-js","path":"/react-intro/","result":{"data":{"site":{"siteMetadata":{"title":"Vincent Cordobes","siteUrl":"https://vincentcordobes.github.io","author":"Vincent Cordobes"}},"markdownRemark":{"id":"f53d4566-bf6f-5c70-a714-4129ba63dbdb","html":"<p><em>⚠ Ce post a été rédigé en 2016. Certaines choses ont évolué depuis…</em></p>\n<p>React est une bibliothèque javascript permettant de <strong>construire des interfaces graphiques composables</strong>. </p>\n<p>La modélisation des interfaces graphiques d’une application au cours du temps est un sujet complexe. Il est, en effet, difficile de suivre l’état d’une application, après une série d’interactions utilisateur et/ou externes.\nDans un SPA, nous ne pouvons plus compter sur des rechargements entiers d’une page web pour garder une interface synchronisée et cohérente.</p>\n<h2 id=\"lidée\" style=\"position:relative;\"><a href=\"#lid%C3%A9e\" aria-label=\"lidée permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>L’idée</h2>\n<p>La solution de React est de décrire “à quoi” l’application doit ressembler à n’importe quel instant donné → construction de\nl’<em>UI</em> de manière <strong>déclarative</strong>. Ce fonctionnement nous donne l’impression que React redessine entièrement l’interface à chaque <em>update</em>\n(uniquement une impression → cf DOM virtuel) Cela rend la conception et le développement d’application considérablement plus simple et nous permet\nde garder très facilement l’interface à jour avec un modèle de données.  L’élaboration de ces interfaces se fait à base de <strong>composants React</strong>.</p>\n<p>On pourrait assimiler un composant React à une <strong>fonction</strong>.\nC’est d’ailleurs l’une des 2 manières possibles d’écrire une composant React.</p>\n<p>L’API des composants est très simple. Un composant <em>peut</em> posséder :</p>\n<ul>\n<li>un <strong>state</strong></li>\n<li>des propriétés : les données d’entrées du composant → <strong>props</strong></li>\n<li>Une méthode <strong>render</strong> chargée du rendu du composant, appelée\nlorsque son <em>state</em> ou une de ses <em>props</em> changent.</li>\n<li>Des méthodes liées au <strong>cycle de vie</strong> du composant <code class=\"language-text\">componentDidMount</code>,\n<code class=\"language-text\">componentWillReceiveProps</code> etc…)</li>\n</ul>\n<h3 id=\"écriture-avec-les-classes-es6\" style=\"position:relative;\"><a href=\"#%C3%A9criture-avec-les-classes-es6\" aria-label=\"écriture avec les classes es6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Écriture avec les classes ES6</h3>\n<p>Ci-dessous un composant React ayant pour seule vocation d’afficher la propriété <em>user</em>.\nSi <em>user</em> change, React redessine la partie du composant ayant changé.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bonjour</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"écriture-sous-forme-de-fonction\" style=\"position:relative;\"><a href=\"#%C3%A9criture-sous-forme-de-fonction\" aria-label=\"écriture sous forme de fonction permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Écriture sous forme de fonction</h3>\n<p>Ce composant peut aussi être écrit sous la forme d’une fonction appelée <strong>functional component</strong>. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Bonjour</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Bonjour </span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Ce type de composant ne possède <del>pas de <em>state</em></del> (cf. <a href=\"https://reactjs.org/docs/hooks-intro.html\">Hooks</a>) <strong>pas d’instance ni\nde méthodes liées au cycle de vie</strong> d’un composant React. Il ne s’agit que d’une\nsimple fonction retournant un résultat en fonction de ses arguments (les <em>props</em>)</p>\n<h3 id=\"dessiner-un-composant-dans-un-nœud-du-dom\" style=\"position:relative;\"><a href=\"#dessiner-un-composant-dans-un-n%C5%93ud-du-dom\" aria-label=\"dessiner un composant dans un nœud du dom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dessiner un composant dans un nœud du DOM</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bonjour</span></span> <span class=\"token attr-name\">user</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Vincent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Pour dessiner le composant dans le DOM il suffit d’appeler\nla méthode <code class=\"language-text\">ReactDOM.render</code> avec ledit Composant et le nœud du DOM où\nl’on souhaite le dessiner.</p>\n<h3 id=\"jsx\" style=\"position:relative;\"><a href=\"#jsx\" aria-label=\"jsx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSX</h3>\n<p>Le code “XML like” que retourne la méthode <em>render</em> s’appelle du <strong>JSX</strong>\net est un sucre syntaxique permettant de créer les nœuds React.\nL’utilisation du JSX n’est pas obligatoire. Voici la correspondance du\ncode JSX :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Bonjour</span></span> <span class=\"token attr-name\">user</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Vincent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p>Avec le code javascript équivalent :</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Bonjour'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token string\">'Vincent'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<!-- ## On parle de container ? -->\n<!--  -->\n<!-- D'un point de vue architectural, nous pouvons très vite distinguer deux types de composants. -->\n<!-- Redux (cf : suite de l'article) parle de **container component** (ou *smart component*) et de -->\n<!-- **presentational component** (ou *dumb component*) -->\n<!-- Si l'on se rapportait à une architecture _MVC_ plus traditionnelle,  -->\n<!-- le premier correspondrait au **C**ontrolleur et le deuxième à la **V**ue. -->\n<!-- **On sépare donc les composants responsables de la logique métier/orchestration des actions, de ceux reponsables de la vue** -->\n<!--  -->\n<!-- ### Exemples -->\n<!-- Considérons un composant qui affiche une liste de pistes (_tracks_) provenant d'une api. -->\n<!--  -->\n<!-- Le code ci-dessous est **moyen** 👿, en effet un même composant **ne devrait pas** être responsable à la fois : -->\n<!-- - d'aller chercher les données de l'api et potentiellement les transformer   -->\n<!-- - d'afficher et mettre en forme ces données  -->\n<!--  -->\n<!-- Ce manque de séparation entre la vue et la logique métier peut très vite rendre le code difficile à maintenir lorsque ce dernier grossit. -->\n<!--  -->\n<!-- #### ✘ Un \"mauvais\" composant : -->\n<!-- ```jsx -->\n<!-- class TrackList extends React.Component { -->\n<!--   state = { tracks: [] } -->\n<!--  -->\n<!--   componentDidMount() { -->\n<!--     axios.get('/tracks') -->\n<!--       .then(response => response.data) -->\n<!--       .then(tracks => this.setState({ tracks })) -->\n<!--       .catch(handleError); -->\n<!--   } -->\n<!--  -->\n<!--   render() { -->\n<!--     return ( -->\n<!--       <ul> -->\n<!--         {this.state.tracks.map(track => ( -->\n<!--           <li>{track}</li> -->\n<!--         ))} -->\n<!--       </ul> -->\n<!--     ) -->\n<!--   } -->\n<!-- } -->\n<!-- ``` -->\n<!--  -->\n<!-- Nous pouvons le séparer en 2 composants, le premier étant un composant \"container\" et le deuxième un composant visuel. -->\n<!--  -->\n<!-- #### ✔ Composant _Container_ : -->\n<!--  -->\n<!-- ```jsx -->\n<!-- // LOgic is here!!  -->\n<!-- // we have completely separated our logic and our view -->\n<!-- class TrackListContainer extends React.Component { -->\n<!--   state = { tracks: [] } -->\n<!--  -->\n<!--   componentDidMount() { -->\n<!--     axios.get('/tracks') -->\n<!--       .then(response => response.data) -->\n<!--       .then(tracks => this.setState({ tracks })) -->\n<!--       .catch(handleError); -->\n<!--   } -->\n<!--  -->\n<!--   render() { -->\n<!--     // This is our view  -->\n<!--     // and the `tracks` props is like our ViewModel  -->\n<!--     return <TrackList tracks={this.state.tracks} /> -->\n<!--   } -->\n<!-- } -->\n<!-- ``` -->\n<!--  -->\n<!--  -->\n<!-- #### ✔ Composant _Presentational_ :  -->\n<!-- ```jsx -->\n<!-- // here is our view -->\n<!-- const TrackList = ({ tracks }) => ( -->\n<!--   <ul> -->\n<!--     {this.state.tracks.map(track => ( -->\n<!--       <li>{track}</li> -->\n<!--     ))} -->\n<!--   </ul> -->\n<!-- ) -->\n<!-- ``` -->\n<h2 id=\"dom-virtuel\" style=\"position:relative;\"><a href=\"#dom-virtuel\" aria-label=\"dom virtuel permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM Virtuel</h2>\n<p>Lorsque nous écrivons un composant React, nous décrivons à quoi l’UI ressemble en fonction des <em>props</em>.\nMême si React donne le sentiment au développeur de repeindre entièrement le DOM à chaque <em>update</em>, il implémente, en réalité, un DOM virtuel qui est une représentation interne en javascript du DOM.\nVoici un schéma illustrant le processus :</p>\n<figure>\n\t<img src=\"/da50ac19fb6613cef197534adab4bda5/react_batch.svg\" width=\"600\">\n\t<figcaption> React et son DOM virtuel</figcaption>\n</figure>\n<p>Lorsque le <span style=\"color: #D32F2F\">modèle de données change</span> la méthode <em>render</em> du composant renvoie\nun objet correspondant à la représentation interne du DOM virtuel.\nReact compare ensuite ce nouveau DOM virtuel avec le précédent\n(algorithme de diff interne), et met à jour le <em>vrai DOM</em> en appliquant un série d’opérations\noptimisées. Ce DOM virtuel permet donc d’optimiser les accès au “vrai DOM”, les modifications sont appliquées\nen une fois.</p>\n<h3 id=\"références\" style=\"position:relative;\"><a href=\"#r%C3%A9f%C3%A9rences\" aria-label=\"références permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Références</h3>\n<ul>\n<li><em>React</em> - https ://facebook.github.io/react</li>\n</ul>","frontmatter":{"title":"Introduction à React","date":"June 06, 2016","description":"React est une bibliothèque permettant de créer des interfaces utilisateurs","thumbnail":null},"fields":{"slug":"/react-intro/"}}},"pageContext":{"slug":"/react-intro/","previous":{"fields":{"slug":"/hello-world/"},"frontmatter":{"title":"Hello World","draft":null}},"next":{"fields":{"slug":"/redux-intro/"},"frontmatter":{"title":"Architecture Redux","draft":null}}}},"staticQueryHashes":["336482444"]}