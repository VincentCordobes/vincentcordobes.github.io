{"componentChunkName":"component---src-templates-blog-post-js","path":"/fp-basics/","result":{"data":{"site":{"siteMetadata":{"title":"Vincent Cordobes","siteUrl":"https://vincentcordobes.github.io","author":"Vincent Cordobes"}},"markdownRemark":{"id":"5e7c3705-8c22-5020-a9be-0bec44df976d","html":"<p>The essence of programming is composition.  In the OOP paradigm we are building sofware by using Object that communicates with each other. To build bigger software we compose those objects.</p>\n<p>In FP the building block is a function! Each function operates on data.\nThe software is made using functions, and we compose them to build bigger software.</p>\n<p>What is functional programming? What are those principles?\nGonna talk here about the very basics of FP using the functional language OCaml</p>\n<p>FP see programming in a mathematical way.</p>\n<p>Major difference between functional languages and imperative languages is</p>\n<h3 id=\"expression-vs-statements\" style=\"position:relative;\"><a href=\"#expression-vs-statements\" aria-label=\"expression vs statements permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expression vs Statements</h3>\n<p>An expression is everything that can be evaluated to produce a value.</p>\n<h4 id=\"in-imperative-languages\" style=\"position:relative;\"><a href=\"#in-imperative-languages\" aria-label=\"in imperative languages permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>In imperative languages</h4>\n<p>Since in OCaml everything is an expression, I‚Äôm going to use javascript to highlight the differences.\nHere is an example of an expression: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> circumference <span class=\"token operator\">=</span> \n   <span class=\"token comment\">// It evaluates to a number</span>\n   <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> radius </code></pre></div>\n<p>On the contrary <code class=\"language-text\">if-else</code> are not expressions in javascript, meaning that you can‚Äôt do that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// This is not a javascript valid syntax!</span>\n<span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>moi <span class=\"token operator\">===</span> <span class=\"token string\">'Vincent'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Same goes for statements <code class=\"language-text\">for</code>, <code class=\"language-text\">while</code>, <code class=\"language-text\">switch</code>, <code class=\"language-text\">try ... catch</code>, <code class=\"language-text\">break</code> etc‚Ä¶ Lot of keywords for a single language üòú </p>\n<h4 id=\"and-what-about-in-fp-languages-\" style=\"position:relative;\"><a href=\"#and-what-about-in-fp-languages-\" aria-label=\"and what about in fp languages  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>And what about in FP languages ?</h4>\n<p>Previously I said everything was an expression in OCaml. But what about the  <code class=\"language-text\">if-else</code>, <code class=\"language-text\">for-loop</code>‚Ä¶? they exist, but those are also expressions!</p>\n<p><code class=\"language-text\">if-else</code> is evaluated to its body content:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> \n  <span class=\"token keyword\">if</span> language <span class=\"token operator\">=</span> <span class=\"token string\">\"ocaml\"</span> <span class=\"token keyword\">then</span> \n    <span class=\"token string\">\"I quite like FP\"</span> \n  <span class=\"token keyword\">else</span> \n    <span class=\"token string\">\"Sorry, what?\"</span>\n<span class=\"token comment\">(* val message : string *)</span></code></pre></div>\n<p><code class=\"language-text\">for</code> and <code class=\"language-text\">while</code> loop are evaluated to the <code class=\"language-text\">unit</code> type:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">for</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">to</span> <span class=\"token number\">3</span> <span class=\"token keyword\">do</span> printf <span class=\"token string\">\"%d\"</span> i <span class=\"token keyword\">done</span>\n<span class=\"token comment\">(* unit = () *)</span></code></pre></div>\n<p>And so on.</p>\n<h3 id=\"immutability\" style=\"position:relative;\"><a href=\"#immutability\" aria-label=\"immutability permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Immutability</h3>\n<p>An immutable variable means its value can‚Äôt be changed after it‚Äôs created.\nIf you want to modify it, well you don‚Äôt. Instead you create a new variable with the new value.</p>\n<p>In OCaml record fields are immutable by default.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  first<span class=\"token punctuation\">_</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Vincent\"</span><span class=\"token punctuation\">;</span>\n  last<span class=\"token punctuation\">_</span>name  <span class=\"token operator\">=</span> <span class=\"token string\">\"Cordobes\"</span><span class=\"token punctuation\">;</span>\n  age        <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you try to update <code class=\"language-text\">me</code>, you‚Äôll get an error:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">me<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;-</span> <span class=\"token number\">35</span> <span class=\"token comment\">(* error: the record field age is not mutable *)</span></code></pre></div>\n<p>Instead you need to create a new variable:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> new<span class=\"token punctuation\">_</span>me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> me <span class=\"token keyword\">with</span> age <span class=\"token operator\">=</span> <span class=\"token number\">35</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>In some other languages objects are mutables by default which can lead to many ‚Äúwtf!‚Äù<br>\nFor example in javascript:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> me <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Vince'</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token number\">23</span> <span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 23</span>\n<span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>me<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 498</span></code></pre></div>\n<div style=\"position:absolute;\n            font-size: 25px;\n            transform: translate(10em, -1.2em);\">ü§î</div>\n<br />\n<p>Who is responsible for that age change? It must be <code class=\"language-text\">printAge</code>! It‚Äôs the only function call we have between the two <code class=\"language-text\">console.log</code>. But wait‚Ä¶ can we really trust <code class=\"language-text\">console.log</code> ? What if I tell you it‚Äôs been monkey patched? Replaced by a custom bugged logger üôà Okay chances are low but if one is being imaginative, it‚Äôs possible.\nThe point is that in a mutable world we can‚Äôt really trust anything. As you can see even in a 4 lines program, mutability can lead to very unexpected behaviour.</p>\n<p>So immutability guaranties us that a variable will never change.\nIt‚Äôs not an FP specific thing but rather a best practice as it makes codes more readable and maintainable.\nIt also makes it easier to do concurrent programming, eliminates defensive copies etc..</p>\n<p>Is mutability always bad tho? Of couse not and as often in IT, it depends! If it‚Äôs local, effects are totally controlled or allow us to optimize a performance critical part of the program etc‚Ä¶ <strong>it‚Äôs totally fine</strong>.</p>\n<h3 id=\"pure-function\" style=\"position:relative;\"><a href=\"#pure-function\" aria-label=\"pure function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pure function</h3>\n<ol>\n<li>Its result depends only on its input‚Äîand not on any external state</li>\n<li>It has no side effects such as mutating a global state/reference arguments, having I/O‚Ä¶</li>\n</ol>\n<p>‚Üí Given the same input, it always returns the same result</p>\n<p>This is a pure function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> double x <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> x</code></pre></div>\n<p>Naturally it shouldn‚Äôt call unpure code:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> get<span class=\"token punctuation\">_</span>week<span class=\"token punctuation\">_</span>day <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> <span class=\"token module variable\">Unix</span><span class=\"token punctuation\">.</span>time <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|></span> <span class=\"token module variable\">Unix</span><span class=\"token punctuation\">.</span>localtime <span class=\"token keyword\">in</span>\n  now<span class=\"token punctuation\">.</span>tm<span class=\"token punctuation\">_</span>wday</code></pre></div>\n<p><code class=\"language-text\">Unix.time</code> is not pure and will always returns a different result. Impurity is contagious. Thus <code class=\"language-text\">get_week_day</code> is not pure. </p>\n<p>There are many benefits to pure functions‚Äîeasy to test, predictables, make the code easier to reason about. They also enable optimizations such as memoization, parallelization.</p>\n<p>I believe in a program one want to maximize pure functions and push unpure code at the edge.</p>\n<h3 id=\"referential-transparency\" style=\"position:relative;\"><a href=\"#referential-transparency\" aria-label=\"referential transparency permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referential transparency</h3>\n<p>Let‚Äôs drop some fancy jargon! Referential transparency means you can safely replace an expresssion by its value without changing the program behaviour.</p>\n<p>Let‚Äôs take the expression <code class=\"language-text\">x + f x</code>. Assuming that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span> is immutable and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is a pure function, then every time we encounter that expression in our program we could replace it by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span> where  <code class=\"language-text\">let y = x + f x</code></p>\n<h3 id=\"first-class-function\" style=\"position:relative;\"><a href=\"#first-class-function\" aria-label=\"first class function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>First class function</h3>\n<p>Functions are data. It means we can pass them as arguments to other functions, return them from other functions or bind them to variables.\nIn this way they are treated as first-class citizens.</p>\n<p>In OCaml we define a function <em>double</em> that takes one argument <em>x</em> like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> double x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span></code></pre></div>\n<p>This is actually a syntactic sugar over an anonymous function bound to a variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> double <span class=\"token operator\">=</span> <span class=\"token keyword\">fun</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span></code></pre></div>\n<h3 id=\"higher-order-function\" style=\"position:relative;\"><a href=\"#higher-order-function\" aria-label=\"higher order function permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Higher order function</h3>\n<p>A higher order function refers to a function that can:</p>\n<ul>\n<li>take one or more functions as arguments and/or</li>\n<li>return a function as its result</li>\n</ul>\n<p>This is <strong>so powerful</strong> and allow us to build common abstraction like <code class=\"language-text\">map</code>, <code class=\"language-text\">fold</code> etc.</p>\n<p>Let‚Äôs see <code class=\"language-text\">List.map</code> for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">val</span> map <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'a</span> <span class=\"token operator\">-></span> <span class=\"token type_variable function\">'b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token type_variable function\">'a</span> list <span class=\"token operator\">-></span> <span class=\"token type_variable function\">'b</span> list</code></pre></div>\n<p>It takes a function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> of type <code class=\"language-text\">&#39;a -&gt; &#39;b</code>, a list of <code class=\"language-text\">&#39;a</code> and applies f to each element of that given list. The result is then a list of <code class=\"language-text\">&#39;b</code>.</p>\n<p>Let‚Äôs say we want to double all the elements in a list:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> doubles <span class=\"token operator\">=</span> <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>map <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">(* val doubles : int list = [2; 4; 6] *)</span></code></pre></div>\n<p>Or by using our <em>double</em> function previously defined:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> doubles <span class=\"token operator\">=</span> <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>map double <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\">(* val doubles : int list = [2; 4; 6] *)</span></code></pre></div>\n<br />\n<p>Now let‚Äôs take a look at folding <code class=\"language-text\">fold</code>‚Äîalso known as <code class=\"language-text\">reduce</code>‚Äîanother fundamental abstraction to walk through a list to build something new.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">val</span> fold<span class=\"token punctuation\">_</span>left <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token type_variable function\">'a</span> <span class=\"token operator\">-></span> <span class=\"token type_variable function\">'b</span> <span class=\"token operator\">-></span> <span class=\"token type_variable function\">'a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token type_variable function\">'a</span> <span class=\"token operator\">-></span> <span class=\"token type_variable function\">'b</span> list <span class=\"token operator\">-></span> <span class=\"token type_variable function\">'a</span></code></pre></div>\n<p>To sum all the elements of a list we would do:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">_</span>left <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> a b <span class=\"token operator\">-></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Or because we are FP dudes and we do <a href=\"https://en.wikipedia.org/wiki/Tacit_programming\">point-free</a> style üòé‚Ä¶:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">_</span>left <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Those two examples <code class=\"language-text\">map</code>, <code class=\"language-text\">fold</code> are so useful that they exist on many many other data types, not just lists.</p>\n<p>We can see that both <code class=\"language-text\">map</code> et <code class=\"language-text\">fold_left</code> return the same kind of things‚Äîa list. This is quite convenient as it allows us to chain multiple operations.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  \n  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n  <span class=\"token operator\">|></span> <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>map double\n  <span class=\"token operator\">|></span> <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">_</span>left <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span> \n<span class=\"token comment\">(* val total : int = 12 *)</span></code></pre></div>\n<p>Note that <code class=\"language-text\">|&gt;</code> is named <em>pipeline operator</em>, it pipes a value into a function. It could be defined like <code class=\"language-text\">let (|&gt;) x f = f x</code> and is left-associative.\nAlternatively, we could write the above code like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token comment\">(* Inline, boouh *)</span>\n<span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span>  <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">_</span>left <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">(</span><span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>map double <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">(* with intermediate values *)</span>\n<span class=\"token keyword\">let</span> doubles <span class=\"token operator\">=</span>  <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>map double <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">let</span> total <span class=\"token operator\">=</span> <span class=\"token module variable\">List</span><span class=\"token punctuation\">.</span>fold<span class=\"token punctuation\">_</span>left <span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token punctuation\">)</span> <span class=\"token number\">0</span> doubles</code></pre></div>\n<p>Personnaly I like the pipe version, it‚Äôs nice and readable and feels like the data flows through the functions. When the output of one function match the input of another, we start seeing the beauty of composition. That‚Äôs what we will see right now.</p>\n<h3 id=\"composition\" style=\"position:relative;\"><a href=\"#composition\" aria-label=\"composition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Composition</h3>\n<p>Composition means creating new <em>things</em> by combining other <em>things</em>.\nIn the functional programming world, we compose functions‚Äîthe building block‚Äîto make new functions.</p>\n<h4 id=\"the-more-functional-math-view\" style=\"position:relative;\"><a href=\"#the-more-functional-math-view\" aria-label=\"the more functional math view permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The more functional Math view</h4>\n<p>build transformation pipeline in a neat way</p>\n<p>compose smaller functions into a larger one</p>\n<p>means input of one function must fit with the output of the other. Statically typed languages like OCaml ensure that‚Äôs the case.\notherwise we may want to leverage some techniques (functor, monad, etc) to compose them</p>\n<p>As a function returns only one result, it also means we can compose functions that takes only one argument.\nBut what if the function takes multiple arguments?\nThat‚Äôs where currying comes into play!</p>\n<p><code class=\"language-text\">|&gt;</code> is application reversed\nThere is no built-in operator but we can define one like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token punctuation\">)</span> f g x <span class=\"token operator\">=</span> f<span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"currying\" style=\"position:relative;\"><a href=\"#currying\" aria-label=\"currying permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Currying</h3>\n<p>Not talking about food here ;)</p>\n<p>By the way, what are all those arrows in the function type signatures? Currying! </p>\n<p><strong>Currying turns a multi-parameters function into a serie of one parameter function.</strong></p>\n<p>In ML languages functions are curried.\nWhich means the two following code are equivalents:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> add a b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n<span class=\"token comment\">(* val add : int -> int -> int *)</span>\n\n<span class=\"token keyword\">let</span> add <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> a <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> b <span class=\"token operator\">-></span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">(* val add : int -> int -> int *)</span></code></pre></div>\n<p>Notice how the two signatures looks the same <code class=\"language-text\">int -&gt; int -&gt; int</code>.\nIn fact, the former is just a syntactic sugar of the latter.</p>\n<p>It feels pretty normal for us that a function returns one and only result. If some wants to return more than one, we would use a tuple or record etc‚Ä¶ </p>\n<p>Well, from a FP point of view, it is the same for arguments.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\">arg1 <span class=\"token operator\">-></span> arg2 <span class=\"token operator\">-></span> arg3 <span class=\"token operator\">-></span> result</code></pre></div>\n<p>Curried functions are so easy to compose due to the one-result/one-argument.\nLook at this for example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> build<span class=\"token punctuation\">_</span>door <span class=\"token operator\">=</span> cut<span class=\"token punctuation\">_</span>wood <span class=\"token operator\">&lt;&lt;</span> chop<span class=\"token punctuation\">_</span>wood<span class=\"token punctuation\">(</span>üî®<span class=\"token punctuation\">)</span> üå≥</code></pre></div>\n<p>We have two functions <code class=\"language-text\">chop_wood</code> and <code class=\"language-text\">cut_wood</code> with different arities, respectively two and one.</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> chop<span class=\"token punctuation\">_</span>wood tool trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">let</span> cut<span class=\"token punctuation\">_</span>wood wood <span class=\"token operator\">=</span> </code></pre></div>\n<p>Thanks to currying we can compose them.</p>\n<p>We also get partial application for free.\nWhich allows us to specialize a function</p>\n<p>Let‚Äôs see for example the <code class=\"language-text\">add</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"ocaml\"><pre class=\"language-ocaml\"><code class=\"language-ocaml\"><span class=\"token keyword\">let</span> add a b <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b\n<span class=\"token comment\">(* val add : int -> int -> int *)</span>\n\n<span class=\"token comment\">(* when applying the first argument 5 we get\na new function expecting the 2nd argument *)</span>\n<span class=\"token keyword\">let</span> addFive <span class=\"token operator\">=</span> add <span class=\"token number\">5</span>\n<span class=\"token comment\">(* val addFive : int -> int *)</span>\n\n<span class=\"token comment\">(* when we give it that second argument, we get the result *)</span>\n<span class=\"token keyword\">let</span> six <span class=\"token operator\">=</span> addFive <span class=\"token number\">6</span>\n<span class=\"token comment\">(* val six : int *)</span></code></pre></div>","frontmatter":{"title":"Basics of Functional Programming","date":"January 31, 2019","description":"Let's talk about some fundamental functional programming principles","thumbnail":null},"fields":{"slug":"/fp-basics/"}}},"pageContext":{"slug":"/fp-basics/","previous":{"fields":{"slug":"/tdd/"},"frontmatter":{"title":"A way to approach a problem","draft":true}},"next":null}}}